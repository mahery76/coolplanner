// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_roles {
  user_role_id   Int     @id @default(autoincrement())
  user_role_name String
  users          users[]
}

model users {
  user_id      Int        @id @default(autoincrement())
  username     String
  user_role_id Int
  role         user_roles @relation(fields: [user_role_id], references: [user_role_id], onDelete: Cascade, onUpdate: Cascade)
}

model majors {
  major_id   Int       @id @default(autoincrement())
  major_name String
  courses    courses[]
}

model groups {
  group_id   Int          @id @default(autoincrement())
  group_name String
  students   students[]
  activities activities[]
}

model courses {
  course_id   Int          @id @default(autoincrement())
  course_name String
  major_id    Int?
  majors      majors?      @relation(fields: [major_id], references: [major_id], onDelete: Cascade)
  activities  activities[]
}

model teachers {
  teacher_id           Int                      @id @default(autoincrement())
  teacher_name         String
  teacher_title        String
  teacher_profil_pic   String
  teacher_availability teacher_availabilities[]
  activities           activities[]
}

model timeslots {
  timeslot_id          Int                      @id @default(autoincrement())
  timeslot_value       String
  teacher_availability teacher_availabilities[]
}

model classrooms {
  classroom_id       Int           @id @default(autoincrement())
  classroom_name     String
  classroom_capacity Int
  activities         activities[]
  occupations        occupations[]
}

model core_classes_refs {
  core_class_ref_id    Int          @id @default(autoincrement())
  core_classe_ref_name String
  activities           activities[]
}

model students {
  student_id   Int    @id @default(autoincrement())
  student_name String
  group_id     Int
  groups       groups @relation(fields: [group_id], references: [group_id])
}

model teacher_availabilities {
  teacher_availability_id Int           @id @default(autoincrement())
  availability_date       DateTime
  teacher_id              Int
  teacher                 teachers      @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  timeslot_id             Int
  slot                    timeslots     @relation(fields: [timeslot_id], references: [timeslot_id], onUpdate: Cascade)
  occupations             occupations[]
}

model activities {
  activity_id              Int                @id @default(autoincrement())
  activity_total_hours     Int
  activity_remaining_hours Int
  group_id                 Int
  course_id                Int
  teacher_id               Int
  classroom_id             Int?
  core_class_ref_id        Int?
  groups                   groups             @relation(fields: [group_id], references: [group_id], onDelete: Cascade, onUpdate: Cascade)
  courses                  courses            @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: Cascade)
  teachers                 teachers           @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: Cascade)
  classrooms               classrooms?        @relation(fields: [classroom_id], references: [classroom_id], onDelete: Cascade, onUpdate: Cascade)
  core_classe              core_classes_refs? @relation(fields: [core_class_ref_id], references: [core_class_ref_id], onDelete: Cascade, onUpdate: Cascade)
  occupations              occupations[]
}

model occupations {
  occupations_id          Int                    @id @default(autoincrement())
  remaining_hours         Int
  is_done                 Boolean
  teacher_availability_id Int
  teacher_availability    teacher_availabilities @relation(fields: [teacher_availability_id], references: [teacher_availability_id], onDelete: Cascade)
  activity_id             Int
  activities              activities             @relation(fields: [activity_id], references: [activity_id], onDelete: Cascade)
  classroom_id            Int
  classrooms              classrooms             @relation(fields: [classroom_id], references: [classroom_id], onDelete: Cascade)
}
